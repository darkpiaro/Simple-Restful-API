basePath: /
definitions:
  controllers.CreateUserRequest:
    properties:
      email:
        example: john@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - fullname
    - password
    - username
    type: object
  controllers.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: darkpiaro
        type: string
    required:
    - password
    - username
    type: object
  controllers.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  controllers.UpdateUserRequest:
    properties:
      email:
        example: john.updated@example.com
        type: string
      fullname:
        example: John Doe Updated
        type: string
      password:
        example: newpassword123
        type: string
      username:
        example: johndoe_updated
        type: string
    type: object
  models.User:
    properties:
      created_by:
        type: integer
      created_on:
        type: string
      email:
        example: john@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      password:
        description: omitempty เพื่อไม่ส่ง password ใน response
        type: string
      updated_by:
        type: integer
      updated_on:
        type: string
      userid:
        example: 1
        type: integer
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple REST API with JWT authentication built with Go and Gin
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Simple RESTful API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid username or password
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to generate token
          schema:
            additionalProperties: true
            type: object
      summary: User Login
      tags:
      - Authentication
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users (protected endpoint)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve users
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account (public endpoint)
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID (protected endpoint)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their ID (protected endpoint)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information (protected endpoint)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
